{"version":3,"sources":["assets/logo.svg","assets/background.svg","styles/global.ts","services/api.ts","styles/variables.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["module","exports","createGlobalStyle","background","api","axios","create","baseURL","colors","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","Dashboard","useState","newRepo","setNewRepo","storagedRepos","localStorage","getItem","JSON","parse","repositories","setRepositories","inputError","setInputError","e","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logo","alt","onSubmit","placeholder","value","onChange","target","type","map","repo","to","full_name","key","owner","avatar_url","login","description","size","Header","header","Info","section","Issues","AllIssuesBtn","Repository","params","useRouteMatch","setRepo","issues","setIssues","then","stargazers_count","forks_count","open_issues_count","issue","href","html_url","id","title","user","length","Routes","exact","path","component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5927afb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/background.0b819d63.svg\";","import { createGlobalStyle } from 'styled-components'\nimport background from '../assets/background.svg'\n\nexport default createGlobalStyle`\n  /*Default*/\n  *,\n  *::after,\n  *::before{\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n  html, body, #root{\n    min-height: 100%;\n  }\n  body{\n    background: #fafafa url(${background}) no-repeat 70% top;\n    /*background-size: cover;*/\n    -webkit-font-smoothing: antialiased !important;\n  }\n  body, input, button{\n    font-family: 'Roboto', Arial, Helvetica, sans-serif; \n    font-size: 16px;\n  }\n  button{\n    cursor: pointer;\n  }\n  a{\n    text-decoration: none;\n    cursor: pointer;\n  }\n  ul{\n    list-style: none;\n  }\n\n  /*This projects*/\n  #root{\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 40px 20px;\n  }  \n`\n","import axios from 'axios'\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n})\n\nexport default api\n","export const colors = {\n  main: '',\n  button: '#84d361',\n  error: '#c53030',\n}\n","import styled, { css } from 'styled-components'\nimport { shade } from 'polished'\n\nimport { colors } from '../../styles/variables'\n\ninterface FormProps {\n  hasError: boolean\n}\n\nexport const Title = styled.h1`\n  font-size: 40px;\n  color: #3a3a3a;\n  line-height: 56px;\n\n  margin-top: 80px;\n`\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 700px;\n\n  display: flex;\n\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n    color: #3a3a3a;\n    border: 2px solid #fff;\n    border-right: 0;\n\n    ${props =>\n      props.hasError &&\n      css`\n        border-color: ${colors.error};\n      `}\n\n    &::placeholder {\n      color: #a8a8b3;\n    }\n  }\n\n  button {\n    width: 210px;\n    height: 70px;\n    background: ${colors.button};\n    border-radius: 0 5px 5px 0;\n    border: 0;\n    color: #fff;\n    font-weight: bold;\n    transition: all 0.2s;\n\n    &:hover {\n      background: ${shade(0.05, colors.button)};\n    }\n  }\n`\n\nexport const Error = styled.span`\n  display: block;\n  color: ${colors.error};\n  margin: 8px 24px;\n`\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n\n    display: flex;\n    align-items: center;\n    transition: all 0.2s;\n\n    &:not(:last-of-type) {\n      margin-bottom: 16px;\n    }\n\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      b {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`\n","import React, { useState, useEffect, FormEvent } from 'react'\nimport { Link } from 'react-router-dom'\nimport { FiChevronRight } from 'react-icons/fi'\n\nimport api from '../../services/api'\nimport { Title, Form, Repositories, Error } from './styles'\nimport logo from '../../assets/logo.svg'\n\ninterface Repository {\n  full_name: string\n  description: string\n  owner: {\n    login: string\n    avatar_url: string\n  }\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('')\n\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepos = localStorage.getItem('@GithubExplorer:repositories')\n    if (storagedRepos) {\n      return JSON.parse(storagedRepos)\n    }\n    return []\n  })\n\n  const [inputError, setInputError] = useState('')\n\n  async function handleAddRepository(\n    e: FormEvent<HTMLFormElement>\n  ): Promise<void> {\n    e.preventDefault()\n    if (!newRepo) {\n      setInputError('Digite \"autor/nome\" de um reposit처rio')\n      return\n    }\n    try {\n      const response = await api.get<Repository>(`repos/${newRepo}`)\n      const repository = response.data\n      setRepositories([...repositories, repository])\n      setNewRepo('')\n      setInputError('')\n    } catch (err) {\n      setInputError(\n        'Reposit처rio n찾o encontrado, verifique os dados e tente novamente'\n      )\n    }\n  }\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@GithubExplorer:repositories',\n      JSON.stringify(repositories)\n    )\n  }, [repositories])\n\n  return (\n    <>\n      <img src={logo} alt=\"Github Explorer\" />\n      <Title>Dashboard</Title>\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n        <input\n          placeholder='Digite \"autor/nome\" de um reposit처rio'\n          value={newRepo}\n          onChange={e => setNewRepo(e.target.value)}\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n      {inputError && <Error>{inputError}</Error>}\n      <Repositories>\n        {repositories.map(repo => (\n          <Link to={`/repositories/${repo.full_name}`} key={repo.full_name}>\n            <img src={repo.owner.avatar_url} alt={repo.owner.login} />\n            <div>\n              <b>{repo.full_name}</b>\n              <p>{repo.description}</p>\n            </div>\n            <FiChevronRight size={20} />\n          </Link>\n        ))}\n      </Repositories>\n    </>\n  )\n}\n\nexport default Dashboard\n","import styled from 'styled-components'\nimport { shade } from 'polished'\nimport { colors } from '../../styles/variables'\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  a {\n    font-size: 20px;\n    display: flex;\n    align-items: center;\n    color: #a8a8b3;\n    transition: all 0.2s;\n\n    &:hover {\n      color: #666;\n    }\n\n    svg {\n      margin-right: 8px;\n    }\n  }\n`\n\nexport const Info = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 24px;\n\n      b {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #737380;\n        margin-top: 4px;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    margin-top: 40px;\n\n    li {\n      &:not(:last-of-type) {\n        margin-right: 80px;\n      }\n\n      b {\n        display: block;\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n      }\n    }\n  }\n`\n\nexport const Issues = styled.div`\n  margin-top: 40px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n\n    display: flex;\n    align-items: center;\n    transition: all 0.2s;\n\n    &:not(:last-of-type) {\n      margin-bottom: 16px;\n    }\n\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      b {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`\n\nexport const AllIssuesBtn = styled.a`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 40px auto;\n  width: 210px;\n  height: 70px;\n  background: ${colors.button};\n  border-radius: 5px;\n  border: 0;\n  color: #fff;\n  font-weight: bold;\n  transition: all 0.2s;\n  cursor: pointer;\n\n  &:hover {\n    background: ${shade(0.05, colors.button)};\n  }\n`\n","import React, { useEffect, useState } from 'react'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi'\n\nimport logo from '../../assets/logo.svg'\nimport { Header, Info, Issues, AllIssuesBtn } from './styles'\nimport api from '../../services/api'\n\ninterface RepositoryParams {\n  repository: string\n}\n\ninterface Repository {\n  full_name: string\n  description: string\n  stargazers_count: number\n  forks_count: number\n  open_issues_count: number\n  owner: {\n    login: string\n    avatar_url: string\n  }\n}\n\ninterface Issue {\n  id: number\n  title: string\n  html_url: string\n  user: {\n    login: string\n  }\n}\n\nconst Repository: React.FC = () => {\n  const { params } = useRouteMatch<RepositoryParams>()\n  const [repo, setRepo] = useState<Repository | null>(null)\n  const [issues, setIssues] = useState<Issue[]>([])\n\n  useEffect(() => {\n    api.get(`repos/${params.repository}`).then(response => {\n      setRepo(response.data)\n    })\n    api.get(`repos/${params.repository}/issues`).then(response => {\n      setIssues(response.data)\n    })\n  }, [params.repository])\n\n  return (\n    <>\n      <Header>\n        <img src={logo} alt=\"Github Explore\" />\n        <Link to=\"/\">\n          <FiChevronLeft size={20} />\n          Voltar\n        </Link>\n      </Header>\n\n      {repo && (\n        <Info>\n          <header>\n            <img src={repo.owner.avatar_url} alt={repo.owner.login} />\n            <div>\n              <b>{repo.full_name}</b>\n              <p>{repo.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <b>{repo.stargazers_count}</b>\n              <span>Stars</span>\n            </li>\n\n            <li>\n              <b>{repo.forks_count}</b>\n              <span>Forks</span>\n            </li>\n\n            <li>\n              <b>{repo.open_issues_count}</b>\n              <span>Issues abertos</span>\n            </li>\n          </ul>\n        </Info>\n      )}\n\n      {issues.map(issue => (\n        <Issues>\n          <a href={issue.html_url} key={issue.id} target=\"_blank\">\n            <div>\n              <b>{issue.title}</b>\n              <p>{issue.user.login}</p>\n            </div>\n            <FiChevronRight size={20} />\n          </a>\n        </Issues>\n      ))}\n\n      {repo && issues.length && (\n        <AllIssuesBtn\n          href={`https://github.com/${repo.full_name}/issues`}\n          target=\"_blank\"\n        >\n          Ver todos os issues\n        </AllIssuesBtn>\n      )}\n    </>\n  )\n}\n\nexport default Repository\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport Dashboard from '../pages/Dashboard'\nimport Repository from '../pages/Repository'\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route exact path=\"/\" component={Dashboard} />\n    <Route path=\"/repositories/:repository+\" component={Repository} />\n  </Switch>\n)\n\nexport default Routes\n","import React from 'react'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport GobalStyles from './styles/global'\n\nimport Routes from './routes'\n\nconst App: React.FC = () => (\n  <>\n  <GobalStyles />\n  <BrowserRouter>\n    <Routes />\n  </BrowserRouter>\n  </>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}